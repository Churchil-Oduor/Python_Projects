				Query Sets

A QuerySet is a collection of data from a database.
It is built up as a list of objects.

Assume we have a model called Members with the fields fieldname, lastname, phone, joined_date,

# To Query Data:
 -> use the .all() method to get ALL the records and fields in the Members model.
		mydata = Members.objects.all()
Place the object in mydata variable and you can then pass it into templates by placing it into an object as below:

context = {
	"mydata" : mydata,
}

# Getting Data:
There are different methods to get data from a model into a QuerySet.

 1) The values() Method

The values() method allows you to return each object as a Python dictionary, with the names and values as key/value pairs.

	mydata = Members.objects.all().values()

# RETURN SPECIFIC COLUMNS

The values_list() method allows you to return the columns that you specify.

	mydata = Members.objects.all().values_list('firstname')

# Return Specific Rows
You can return the data contained in specfic rows by using the .filter() method.

	mydata =  Members.objects.filter(firstname = "Emil").values()

In SQL, the above would have been written as:

		 SELECT * FROM Members WHERE firstname = "Emil"

If you went to enter more than two search parameters, you can the filter method as follows:

	mydata = Members.objects.filter(firstname = "Emil", id = 2).values()

 In SQL , the above would be:
	SELECT * FROM Members WHERE firstname = "Emil" AND id = 2

if you want to use OR

We can use multiple filter(), methods, separated by a pipe | character. The results will merge into one model.

	mydata = Member.objects.filter(firstname='Emil').values() | Member.objects.filter(firstname='Tobias').values()


Another common method is to make use of Q-Expressions as below:

	mydata = Member.objects.filter(Q(firstname='Emil') | Q(firstname='Tobias')).values()


In SQL, this would be same as:

	SELECT * FROM Members WHERE firstname = "Emil" OR firstname = "Tobias";

# FIELD LOOKUPS

Django has its own way of specifying SQL statements and WHERE clauses.

To make specific where clauses in Django, use "Field lookups".

Field lookups are keywords that represents specific SQL keywords.

	mydata = Member.objects.filter(firstname__startswith='L').values()

# ORDER BY
To sort Query Sets, Django uses, the .order_by() method
For instance to order alphabetically by firstname:

	mydata = Member.objects.all().order_by('firstname').values()
In SQL this is the same as saying:
 
	SELECT * FROM Members ORDER BY firstname;


			#ORDERING IN DESCENDING ORDER

To order in Descending order:
By default, the result is sorted ascending (the lowest value first), to change the direction to descending (the highest value first), use the minus sign (NOT), - in front of the field name:

	mydata = Member.objects.all().order_by('-firstname').values()

In SQL this would be same as saying
	SELECT * FROM members ORDER BY firstname DESC;

			#MULTIPLE ORDER BYS
To order by more than one field, separate the fieldnames with a comma in the order_by() method:

	mydata = Member.objects.all().order_by('lastname', '-id').values()

In SQL this would be:
	SELECT * FROM members ORDER BY lastname ASC, id DESC;







